Implementation Plan for Automated BigFix Fixlet Creation

1. Prerequisites and Overview

Before starting, ensure you have the following in place:

Microsoft Copilot Studio access with Generative AI features enabled (to allow file uploads and generative answer nodes). Make sure the Generative AI setting is turned on for your Copilot agent.

Power Automate environment where you can create cloud flows (with the Power Virtual Agents trigger available).

OpenAI or Azure OpenAI API Access for GenAI operations in the flow (an API key or Azure OpenAI resource with a deployed model like GPT-4).

Basic understanding of BigFix Fixlet components (Relevance conditions and Action script). No BigFix server integration is done in this plan – we will generate fixlet definitions as text for manual import or further automation.


High-Level Goal: Build a Copilot chat agent that accepts a CSV file of applications, uses GenAI to parse it and determine detection logic, then calls a Power Automate flow to generate four BigFix fixlet definitions (Install, Upgrade, Reinstall, Uninstall) for each application. The output will be presented in the chat for the user to copy or use.


---

2. Configure the Copilot Studio Agent (File Upload and GenAI)

This section outlines creating the Copilot agent and defining a conversation topic that handles the file upload, CSV parsing with GenAI, and triggers the flow for fixlet generation.

2.1 Create a New Copilot Agent and Topic

1. Create the agent: In Copilot Studio, create a new custom Copilot (agent). Give it a descriptive name (e.g., “BigFix Fixlet Generator”). Enable generative capabilities for this agent in Settings if prompted.


2. Add a topic: Go to the Topics section and create a new topic from blank (e.g., name it “Generate Fixlets”). This topic will contain the conversation logic.


3. Define trigger phrases: In the topic’s trigger, add phrases that should invoke this process. For example, add triggers like:

“generate fixlets”

“create BigFix fixlets”

“software deployment tasks”


This ensures if a user types a similar request, this topic will start.



2.2 Enable File Upload and Generative Answers

Before building the topic logic, make sure the agent can accept file input and use generative answers:

Enable file uploads: In the Copilot Studio agent’s settings, under Generative AI, ensure the option Generative is selected (enabling generative answers). This mode allows users to upload files in the chat (via the paperclip or drag-and-drop) as a knowledge source.

Knowledge source scope: When using generative answer nodes in the topic, you can specify to use the uploaded file as a data source. We will do this in the YAML. (At runtime, the user will be prompted to attach the CSV file; Copilot will then treat the file content as context for generative AI.)


2.3 Design the Conversation Flow with YAML

We will now construct the topic’s dialog step-by-step. It’s easiest to use the Code Editor for precise control. Open the topic’s Code Editor to edit it in YAML. We will build the following sequence:

1. Bot greets and asks for CSV file.


2. User uploads CSV file.


3. Bot uses a Generative Answers node (GenAI) to parse the CSV and list the applications found.


4. Bot asks user to confirm whether to generate fixlets for those applications.


5. If user confirms, bot calls a Power Automate flow to generate the fixlet definitions.


6. Bot displays the generated fixlet text back to the user.


7. If user declines, bot ends the process.



Below is the YAML configuration for the topic implementing these steps. Copy this into the code editor (replace placeholders like <FlowID> with your actual flow’s ID once created):

kind: AdaptiveDialog
id: GenerateFixletsTopic
beginDialog:
  kind: OnBeginDialog        # Trigger this topic when invoked by trigger phrases
  id: main
  actions:
    - kind: SendActivity     # Step 1: Prompt user to upload the CSV
      id: MsgPromptFile
      activity:
        text:
          - "Sure, I can help create BigFix fixlets. Please upload a CSV file containing the list of applications (with details like Name, Version, etc.) to get started."
    - kind: GenerativeAnswers    # Step 3: GenAI parses the CSV file content
      id: GenParseCSV
      prompt: |
        You are an assistant reading a CSV file of software. 
        The user has uploaded a CSV file with software details. 
        List each software application name and version found in the CSV.
      variable: AppsSummary       # Store the AI-generated summary list in a variable
      # Note: The uploaded CSV file is used as a knowledge source automatically for this node (no additional config needed if file is attached by user).
    - kind: SendActivity         # Step 3 (continued): Show the parsed list to the user
      id: MsgShowApps
      activity:
        text:
          - "I found the following applications in the CSV:\n{AppsSummary}\nDo you want me to generate BigFix fixlets for these applications?"
    - kind: Ask                  # Step 4: Yes/No confirmation from user
      id: AskConfirmation
      prompt:
        text:
          - "Generate deployment fixlets for the above applications? (Yes or No)"
      expectedResponses:
        - text: "Yes"
        - text: "No"
      variable: UserDecision
    - kind: ConditionGroup       # Step 5: Branch based on user decision
      id: DecisionBranch
      condition: =toLower(UserDecision) == "yes"
      actions:
        - kind: PowerAutomateAction   # Call the Power Automate flow to build fixlets
          id: GenerateFixletsFlow
          flowId: <FLOW_ID>           # (Placeholder) GUID or identifier of the flow to call
          inputs:
            CSV_Text: "{AppsSummary}" # Pass the CSV summary or content if available (adjust input mapping as needed)
          outputs:
            FixletsOutput: AllFixletsText   # Store the flow's output (the generated fixlet text)
        - kind: SendActivity      # Step 6: Display the fixlet definitions returned by the flow
          id: MsgResults
          activity:
            text:
              - "**Generated Fixlets:**\n{AllFixletsText}"
      elseActions:
        - kind: SendActivity      # If user said No, or any other response
          id: MsgCancelled
          activity:
            text:
              - "Understood. No fixlets will be generated. (You can restart this process anytime.)"

Notes on the YAML above:

The GenerativeAnswers node (GenParseCSV) will use the uploaded CSV file content when generating the answer for {AppsSummary}. The prompt instructs the AI to list each software name and version from the file. The result is stored in the variable AppsSummary (which is then used in the next message).

The Ask node (AskConfirmation) expects a simple "Yes" or "No". We use a ConditionGroup to check the answer. In YAML, the condition uses an expression to compare UserDecision to "yes" (converted to lower case for safety). The actions under that condition execute if the user said Yes.

We use a PowerAutomateAction to call the flow. Replace <FLOW_ID> with the actual Flow ID or logical name once you create the flow in section 3. You will also need to map the inputs and outputs:

Here we pass an input named CSV_Text with the value of {AppsSummary}. In practice, you might pass the actual file content or path to the flow. (If you can obtain the full CSV content, pass that instead. This example uses the summary for simplicity.)

The flow’s output (FixletsOutput) is captured as AllFixletsText. This will contain the generated fixlet definitions as a single text block.


The results message formats the output. We wrapped the fixlets text in a bold label and included it directly. If the content is large, consider splitting into multiple messages or formatting with triple backticks for readability (the example shows it in one block for simplicity).


Save the topic after inserting the YAML. The conversation logic for the Copilot agent is now set up.

2.4 Review the Topic in Visual Editor (Optional)

You can switch back to the visual canvas to verify the structure corresponds to the intended steps:

Trigger: “generate fixlets” (and other phrases) leads into the topic.

Message: Bot asks for the CSV file.

Generative Answers node: Uses the file to generate a summary of applications.

Message: Bot shows the found applications and asks for confirmation.

Question (UserDecision): Captures Yes/No.

Condition branch: If Yes, calls the flow action and then shows results; if No, sends a cancellation message.


Make sure there are no syntax errors (Copilot Studio will highlight if YAML indentation or syntax is off). Adjust IDs or text as needed. At this point, the Copilot agent is ready, pending the Power Automate flow which we will create next.


---

3. Create the Power Automate Flow for Fixlet Generation

Next, build the cloud flow that will take data from the Copilot and produce BigFix fixlet definitions. This flow will:

1. Receive input from Copilot (the CSV data or a summary/list of apps).


2. Parse the CSV to retrieve each application’s details.


3. For each application, use GenAI to determine the best detection method (registry or file) for that app.


4. Populate BigFix fixlet templates (Install, Upgrade, Reinstall, Uninstall) with the app’s details and the detection logic.


5. Return the assembled fixlet definitions as output to the Copilot.



Follow these steps to implement the flow:

3.1 Set Up the Flow Trigger and Inputs

Create a new flow: In Power Automate, create a Cloud flow and choose the trigger “When a Power Virtual Agents calls a flow”. Name the flow something like “GenerateFixletsFlow”.

Define input parameters: In the Power Automate trigger block, add an input of type Text for the CSV data. For example, create an input parameter called CSV_Text (this will receive the CSV content or the generative summary from the agent).


> Note: Ideally, we would pass the entire CSV file content to the flow for accurate parsing. Copilot Studio might not directly pass file binary in this integration. A workaround is to pass the text content of the CSV (if accessible) or a summarized form. In our YAML, we passed AppsSummary (a list of app names and versions). If your CSV contains additional columns (like download URL, install commands, etc.), you may need to retrieve the file content through other means (e.g., a SharePoint/OneDrive link or using Dataverse if the file is stored as an attachment). For this plan, we assume CSV_Text contains at least the application name and version for each entry, either through the summary or direct content.



Add an initialization step (optional): If you plan to build the output string incrementally, initialize a String variable, e.g., AllFixletsText, as empty. We will append fixlet texts to this as we loop through apps. (You can also build the output in a single Compose – choose whichever method is more comfortable.)


3.2 Parse the CSV Content into Application Records

Now parse the CSV text to extract each application’s details:

1. Split lines: Add a Compose action (or Initialize Variable of Array type) named “Compose_Lines” with the expression to split the CSV text by newlines. For example, in the expression field use:

split(triggerBody()?['CSV_Text'], '\n')

This will produce an array of lines from the CSV input. (If using an initialize variable, set its value with that expression.)


2. Handle header row: If your CSV has a header row, you should remove it before processing. One simple way is to use the skip() function to skip the first array element. You can do this directly in the loop step (described next) or by adding another Compose:

skip(outputs('Compose_Lines'), 1)

This returns the array of lines minus the first element. In the next step, we’ll feed this into the loop.


3. Loop through each line: Add an Apply to each action, and set its “Select an output from previous steps” to the array of lines (excluding header). For example, use the expression outputs('Compose_Lines') if no header, or skip(outputs('Compose_Lines'), 1) if you have a header. Now the flow will iterate over each CSV line representing an application.



Inside the Apply to each (for each app line):

Split the line by delimiter: Add a Compose action (or another method) to split the current line by commas (assuming a CSV comma-separated format). For example, name it “Compose_Fields” with expression:

split(item(), ',')

This produces an array of fields for the current line.

Assign fields to variables: For clarity, assign each field to a descriptive variable (or use Compose) so we can reference them easily later. For example:

Add Set variable actions for each field (ensure you have initialized these variables outside the loop if using variables):

AppName = an expression like outputs('Compose_Fields')[0] (the first column value).

AppVersion = outputs('Compose_Fields')[1] (second column).

InstallerURL = outputs('Compose_Fields')[2] (third column, assuming CSV includes a download URL).

If your CSV has more fields (like silent install command, uninstall command/product code, etc.), set variables for those as well (e.g., InstallCommand, UninstallCommand). If not, we will use placeholders in the templates for those and fill manually later.



After this step, we have the current application’s Name, Version, and other details stored in variables for use.


3.3 Determine Installation Detection Method with GenAI

For each application (still inside the loop), use a generative AI call to decide the best detection approach (registry-based or file-based) for that software:

1. Compose the prompt: Prepare a prompt string that provides the application’s name (and possibly version or other context) to the AI and asks which detection method to use. For example, you can use a Compose action or directly in the API call:
Prompt Example:

Given a Windows application named "{AppName}" (version {AppVersion}), suggest the most reliable way to detect if it is installed. Respond with either "Registry: <details>" if checking a registry uninstall key is best, or "File: <details>" if checking for a specific file is better. Provide the registry path or file path you recommend.

This prompt instructs the model to choose and provide details. We ask for a specific format: starting the answer with "Registry:" or "File:" for easy parsing.


2. Call the OpenAI/Azure OpenAI API: Add an action to invoke the generative AI:

If you have the Azure OpenAI Service connector available, use the “Create text with GPT” (or similar) action. Select your Azure OpenAI resource, the deployment (model) name (GPT-4 or GPT-3.5), and in the prompt field, insert the prompt from above. (You can include the variables AppName and AppVersion in the prompt text by inserting dynamic content or using an expression.)

Alternatively, use an HTTP action to call the OpenAI API:

Method: POST

URL: https://api.openai.com/v1/chat/completions (for ChatGPT models)

Headers:

Authorization: Bearer YOUR_API_KEY

Content-Type: application/json


Body (example for chat completion):

{
  "model": "gpt-3.5-turbo",
  "messages": [
    {"role": "system", "content": "You are an expert in software deployment detection."},
    {"role": "user", "content": "Given a Windows application named \"{{AppName}}\" (version {{AppVersion}}), suggest the most reliable way to detect if it is installed. Respond with either \"Registry: <details>\" or \"File: <details>\"."}
  ],
  "max_tokens": 100,
  "temperature": 0
}

(Replace {{AppName}} and {{AppVersion}} with the dynamic values or construct the string in your flow.)


Make sure to include your API key (for OpenAI) or have proper connection setup (for Azure OpenAI). Use GPT-4 if available for better accuracy, but GPT-3.5 can suffice.



3. Parse the AI response: The AI will return a response indicating the method. For example, it might return:

"Registry: HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\ExampleApp" or

"File: C:\\Program Files\\ExampleApp\\app.exe".


Capture this output. If using the Azure OpenAI connector, the result might be in a field like “Completion” or “Result”. If using HTTP, you may need a Parse JSON action to extract choices[0].message.content from the response JSON.

Add a Set variable (or Compose) for DetectionMethod = the text returned by the model (e.g., “Registry: ...” or “File: ...” string).



4. Decide on registry vs file: We will use the content of DetectionMethod to populate the fixlet relevance appropriately:

If DetectionMethod starts with "Registry:", we’ll use registry-based relevance in the fixlets.

If it starts with "File:", we’ll use file-based relevance.


We can detect this in flow with a simple Condition or by string handling:

e.g., Condition: startsWith(variables('DetectionMethod'), 'Registry') (one branch for Registry, else File).

Or simply handle in how we build the strings (e.g., use replace or substring functions to get the path from the string).




Keep the DetectionMethod variable handy for the next step where we assemble the fixlet templates.

3.4 Construct BigFix Fixlet Templates for the Application

Now for each application, we will generate four fixlet definitions (Install, Upgrade, Reinstall, Uninstall) using predefined templates. We will insert the application’s Name, Version, and appropriate detection logic (depending on registry vs file) into these templates.

Inside the loop (after obtaining DetectionMethod):

3.4.1 Install Fixlet – This fixlet will install the application if it is not present on the system.

Relevance: The application is not installed.

For registry-based detection: check that no uninstall entry exists for this app.
Example relevance: not exists keys whose (value "DisplayName" of it as string = "<AppName>") of key "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" of native registry
(This means if an uninstall entry with the app name doesn’t exist, the app is not installed, hence relevant to install.)

For file-based detection: check that the main executable file is not present.
Example relevance: not exists file "<InstallPath>\<MainExecutable>"
(If the file doesn’t exist, the app is not installed.)


Action Script: Download and install the application. Usually, this involves:

1. Downloading the installer (using BigFix download or prefetch command with the URL).


2. Running the installer silently.
Example (using a placeholder URL and silent command):



download {InstallerURL}
continue if {exists file ( "__Download\installer.exe" )}
wait __Download\installer.exe {SilentInstallArguments}

This will download the installer and then execute it. {SilentInstallArguments} could be “/qn” for MSIs or vendor-specific silent flags for .exe installers.

Template Code: Below is a template for the Install fixlet. We use placeholders in curly braces for values that will be replaced:

<!-- Install Fixlet Template -->
<Title>Install {AppName} {AppVersion}</Title>
<Description>Installs {AppName} version {AppVersion} if it is not currently installed.</Description>
<Relevance>
  <!-- If using registry method: -->
  not exists keys whose (value "DisplayName" of it as string = "{AppName}") of key "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" of native registry
  <!-- If using file method: -->
  <!-- not exists file "{InstallPath}\{MainExecutable}" -->
</Relevance>
<ActionScript>
  action uses wow64 redirection false  <!-- (Optional, if installing 64-bit app on 64-bit OS) -->
  download {InstallerURL}
  continue if {exists file ( "__Download\installer" )}
  wait __Download\installer {SilentInstallArguments}
</ActionScript>

In the flow, you will replace:

{AppName} with the application name.

{AppVersion} with the version.

The <Relevance> block: choose the appropriate line based on DetectionMethod (include the registry check line or the file check line). You should also replace {InstallPath}\{MainExecutable} with the actual path if DetectionMethod provided one. For example, if DetectionMethod = "File: C:\Program Files\ExampleApp\Example.exe", use that path in the relevance.

{InstallerURL} with the URL from the CSV (the variable InstallerURL).

{SilentInstallArguments} with the appropriate silent install command (this might be from CSV or a default like /qn for MSI; you can store it in a variable or decide based on installer type).



3.4.2 Upgrade Fixlet – This fixlet upgrades the application if an older version is present.

Relevance: The application is installed with an older version (lower than the target version).

Registry method: Check if an uninstall entry with the app name exists and the DisplayVersion is less than the target version.
Example: exists keys whose (value "DisplayName" of it as string = "{AppName}" AND value "DisplayVersion" of it as string as version < "{AppVersion}" as version) of key "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" of native registry

File method: Check if the main executable file exists and its version is less than the target version.
Example: exists file "{InstallPath}\{MainExecutable}" whose (version of it < "{AppVersion}")


Action Script: Similar to install – download the new installer and run it. (It will upgrade the existing installation.)

Template Code:

<!-- Upgrade Fixlet Template -->
<Title>Upgrade {AppName} to version {AppVersion}</Title>
<Description>Upgrades {AppName} to version {AppVersion} if an older version is installed.</Description>
<Relevance>
  <!-- Registry method: older version installed -->
  exists keys whose (
    value "DisplayName" of it as string = "{AppName}" 
    AND (value "DisplayVersion" of it as string as version) < "{AppVersion}" as version
  ) of key "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" of native registry
  <!-- File method: file exists with lower version -->
  <!-- exists file "{InstallPath}\{MainExecutable}" whose (version of it < "{AppVersion}") -->
</Relevance>
<ActionScript>
  action uses wow64 redirection false
  download {InstallerURL}
  continue if {exists file ( "__Download\installer" )}
  wait __Download\installer {SilentInstallArguments}
</ActionScript>

Replace placeholders as before. The action can usually be identical to the Install action (installing the new version). The difference is purely in the relevance conditions.


3.4.3 Reinstall Fixlet – This fixlet reinstalls the application (for repair or enforcement) if the desired version is already installed.

Relevance: The application is installed at (or above) the target version. (You might choose “at exactly the target version” if you only want to reinstall same version, or “>=” if any equal/newer means it’s already present. Here we assume we reinstall if the same version is present.)

Registry: exists keys whose (value "DisplayName" of it as string = "{AppName}" AND value "DisplayVersion" of it as string as version >= "{AppVersion}" as version) of key "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" of native registry

File: exists file "{InstallPath}\{MainExecutable}" whose (version of it >= "{AppVersion}")


Action Script: Same steps as an install (download installer and run) – it will essentially repair or reinstall the application.

Template Code:

<!-- Reinstall Fixlet Template -->
<Title>Reinstall {AppName} {AppVersion}</Title>
<Description>Reinstalls/repairs {AppName} version {AppVersion} if it is already installed.</Description>
<Relevance>
  <!-- Registry method: version is already installed -->
  exists keys whose (
    value "DisplayName" of it as string = "{AppName}" 
    AND value "DisplayVersion" of it as string as version >= "{AppVersion}" as version
  ) of key "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" of native registry
  <!-- File method: file exists with version >= target -->
  <!-- exists file "{InstallPath}\{MainExecutable}" whose (version of it >= "{AppVersion}") -->
</Relevance>
<ActionScript>
  action uses wow64 redirection false
  download {InstallerURL}
  continue if {exists file ( "__Download\installer" )}
  wait __Download\installer {SilentInstallArguments}
</ActionScript>

Again, placeholders get replaced accordingly. This fixlet is applicable only when the app is present, so it can be used to enforce installation or fix any issues by reinstalling.


3.4.4 Uninstall Fixlet – This fixlet removes the application if it is installed.

Relevance: The application is installed (at any version).

Registry: exists keys whose (value "DisplayName" of it as string = "{AppName}") of key "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" of native registry

File: exists file "{InstallPath}\{MainExecutable}"


Action Script: Run the uninstall command for the application. This could vary:

If the app is an MSI, use msiexec /x {ProductCode} /qn. The ProductCode GUID would ideally come from the registry. (If the AI provided a specific registry path or product code, you could parse that. Otherwise, you might store uninstall strings in the CSV for each app.)

If the app has a known uninstaller exe, use that (with silent flags). Possibly the uninstall string is in the Uninstall registry key’s "UninstallString" value, which could be leveraged if known.

For simplicity, if the CSV provides an uninstall command or product code, use it. If not, this fixlet template will have a placeholder to fill manually.


Template Code:

<!-- Uninstall Fixlet Template -->
<Title>Uninstall {AppName}</Title>
<Description>Uninstalls {AppName} if it is currently installed.</Description>
<Relevance>
  <!-- Registry method: app is installed -->
  exists keys whose (value "DisplayName" of it as string = "{AppName}") of key "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" of native registry
  <!-- File method: app's main file exists -->
  <!-- exists file "{InstallPath}\{MainExecutable}" -->
</Relevance>
<ActionScript>
  action uses wow64 redirection false
  // If MSI product code is known:
  // wait msiexec.exe /x {ProductCode} /qn
  // If an uninstall command is known:
  wait {UninstallCommand}
</ActionScript>

Here, {UninstallCommand} or {ProductCode} would be placeholders to populate. If your CSV had an “UninstallString” column, you could use that directly. Otherwise, you might need to manually fill these after generation or enhance the flow to retrieve the uninstall command from the registry via BigFix relevance or another data source. In our current flow, we haven’t provided a way to get the uninstall command, so consider this template as a framework that may need additional input. (At the very least, the presence of the application is correctly detected by the relevance.)


In the Power Automate flow, to build these templates for the current application:

You can use Compose or Append to string variable actions to piece together each fixlet’s text. A straightforward method is to use “Append to string variable” for the output variable AllFixletsText:

1. Append the Install fixlet text with placeholders replaced by actual values. You can copy the template and then in the flow designer, insert the variables (AppName, AppVersion, etc.) in place. Also use the DetectionMethod variable to decide which relevance line to include:

If DetectionMethod contains "Registry", append the registry relevance line and comment out the file line (or omit it).

If it contains "File", append the file relevance line and omit the registry line. Use the path provided by DetectionMethod for {InstallPath}\{MainExecutable}.

This logic might require an If condition or two different compose blocks. You can implement it by constructing the relevance string in an earlier step. For example, use a Compose action Compose_RelevanceInstall:

If registry: value = not exists keys whose (value "DisplayName" of it as string = "${AppName}") of key "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall" of native registry

If file: value = not exists file "${FilePathFromDetection}"

Then in the template, insert Compose_RelevanceInstall output.




2. Append the Upgrade fixlet text in the same manner (use a similar approach to build the correct relevance line for upgrade).


3. Append the Reinstall fixlet text.


4. Append the Uninstall fixlet text.




Make sure to add line breaks or separators between each fixlet block for readability. For example, after each fixlet, append \n\n (two newlines) before appending the next, so that the output blocks are separated.

Tip: In the Power Automate designer, when using Append to string variable, you can include actual newline characters by pressing Shift+Enter in the input field. Construct the text with the proper XML/BigFix syntax and insert the dynamic content where needed. This avoids having to manually use concat() expressions for newlines.

By the end of these append operations for a single application, you will have appended four fixlet definitions (Install/Upgrade/Reinstall/Uninstall) to the AllFixletsText variable. If there are multiple applications, each iteration will append its fixlets one after the other. You might want to also append a separator between different applications’ blocks (for example, a line like ----- or an extra newline) to distinguish the groups in the output, but that’s optional.

3.5 Complete the Flow and Return Results to Copilot

After the Apply to each loop is finished (i.e., after processing all application lines):

Add the “Return values to Power Virtual Agents” action (this is automatically added at the end of the flow when using the PVA trigger). In this action, set an output property (e.g., FixletsOutput) to the AllFixletsText variable (or the compose that holds the aggregated text).

Save the flow. Now copy the flow’s GUID/ID or note its name to use in the Copilot topic. In Copilot Studio, open the topic’s code (or use the action menu) to map this flow:

If using the visual editor: add an Action node, choose the flow you just created (it will appear in the list of available flows), and map the input CSV_Text to the appropriate variable (if you captured full CSV elsewhere, map that; or if not, you might not need to pass AppsSummary at all if your flow doesn’t actually use it to parse – in our YAML we passed it, but our flow design uses it only for names and versions since we assumed no full CSV).

Map the output FixletsOutput to a variable (we used AllFixletsText in YAML).

(We already wrote this in YAML in section 2.3 as the PowerAutomateAction with inputs/outputs. Ensure the flowId matches your flow’s ID. If you used the visual editor to add it, the YAML will update with the correct ID and you can copy that into your final YAML file.)



At this point, the flow is integrated with the Copilot topic. When invoked, it will return the generated fixlet definitions which the bot will then display.


---

4. Testing the End-to-End Solution

With both the Copilot agent and the Power Automate flow configured, perform a test run to ensure everything works as expected:

1. Open the Copilot chat (in Copilot Studio’s test canvas or wherever the agent is deployed). Trigger the topic by typing one of the trigger phrases, for example: “generate fixlets”.


2. Upload the CSV file: When prompted to upload the CSV, attach your test CSV file (e.g., a CSV with a couple of software entries). The bot should accept the file (you might see a message like “File received” depending on the interface).


3. Verify GenAI parsing: The bot (via the generative answers node) should respond with a list of applications it found in the CSV (the AppsSummary). For example, “I found the following applications: App1 v1.2, App2 v3.4, …”. Ensure this matches your CSV content.


4. Confirm generation: The bot asks if you want to generate fixlets. Respond “Yes”.


5. Flow execution: The Power Automate flow will run. This may take a few moments, as it is parsing data and calling the AI for each app. Once done, the bot should output the Generated Fixlets text.


6. Review output: Check that four fixlets are listed for each application (Install, Upgrade, Reinstall, Uninstall) and that the placeholders have been replaced correctly:

The app name and version should appear in titles, descriptions, and relevance where appropriate.

The relevance should reflect the chosen detection method (if the AI decided “Registry”, the relevance block should show registry checks and the file check line should be commented or removed; vice versa for file).

URLs and commands from the CSV should be in place in the action script (download URL, etc.).

If any expected field is missing (for example, if uninstall command was not provided), you may see a placeholder remaining. That indicates additional input or manual editing is needed.



7. Test a fixlet (optional): Although not part of the generation process, it’s wise to validate one of the generated fixlets in a BigFix environment:

Copy the text for one fixlet (for example, the “Install App1 v1.2” fixlet) and create a new Fixlet in the BigFix Console with it.

Adjust any placeholders or syntax as needed (e.g., BigFix might require actual SHA1 in prefetch if used, or you may need to remove the curly braces if any left). In our templates we used curly braces for the plan, but assume the flow has replaced them. Ensure no curly braces remain unless they are part of BigFix relevance/action syntax.

Save and test the relevance on a target machine (the Fixlet should show as relevant on a machine that does not have the app for Install, etc., according to the logic).

You can also deploy the action on a test machine to see if the installer downloads and runs correctly. Monitor the BigFix client log for any issues.

Do similar checks for uninstall if possible (make sure it removes the software).



8. Iterate improvements: If the output isn’t perfect, refine the flow or the prompts:

If GenAI’s suggestions were not accurate (e.g., an incorrect file path), you can provide a better hint or default. For instance, you might incorporate the publisher name in the prompt or maintain a small lookup for known apps.

If some placeholders weren’t filled due to missing data (like uninstall strings), consider adding those fields to the CSV or enhancing the flow to query the registry. Another improvement could be to use BigFix’s relevance in the flow to fetch the UninstallString via the BigFix REST API or an automation, but that goes beyond this initial implementation.

Ensure all YAML and flow steps are error-free. Use Copilot Studio’s test console and Power Automate’s run history (and logs) to debug any issues.




By the end of testing, you should have a working system: You (or users) can ask the Copilot to generate fixlets, provide a CSV of applications, and receive ready-to-use BigFix fixlet definitions for each application. The fixlets are comprehensive and cover install, upgrade, reinstall, and uninstall scenarios, with detection logic chosen intelligently by the AI.


---

5. Conclusion

This implementation plan provided a step-by-step guide to build a Copilot Studio agent and a Power Automate flow that together generate BigFix fixlet content automatically. By following the numbered steps and using the provided YAML and template code, you can implement the whole system from scratch:

The Copilot agent handles user interaction: file upload, using GenAI to parse input, and triggering the automation flow.

The Power Automate flow handles data parsing, logic generation via AI, and text assembly for fixlets.

The BigFix fixlet templates are embedded in the flow, ready to be populated with dynamic data and AI-chosen detection methods.


Use this document as a blueprint. You can copy the YAML configuration for the Copilot topic, create the described flow with the given expressions and prompts, and utilize the fixlet templates as indicated. Once set up, you will be able to generate consistent BigFix fixlets for any list of applications by simply uploading a new CSV and confirming the action – significantly accelerating the creation of software deployment content in BigFix.

